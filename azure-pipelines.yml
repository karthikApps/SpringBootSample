# Maven package Java project Web App to Linux on Azure
# Build your Java project and deploy it to Azure as a Linux web app
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/java

trigger:
- main

variables:

  # Web app name
  webAppName: 'javawebapp0001'

  # Environment name
  environmentName: 'javawebapp0001'

stages:
- stage: Build
  displayName: Build stage
  jobs:
  - job: MavenPackageAndPublishArtifacts
    displayName: Maven Package and Publish Artifacts
    pool:
      name: mylocal
      demands: Agent.Name -equals MSI

    steps:
    
    - task: CmdLine@2
      displayName: 'Check Maven Version'
      inputs:
          script: 'mvn -version'

    - task: Maven@4
      displayName: 'Maven Package'
      inputs:
        mavenPomFile: '$(Build.SourcesDirectory)/pom.xml'
        goals: 'clean install'
        options: '-X'
    

    - task: CopyFiles@2
      displayName: 'Copy Files to artifact staging directory'
      inputs:
        SourceFolder: '$(System.DefaultWorkingDirectory)'
        Contents: '**/target/*.?(war|jar)'
        TargetFolder: $(Build.ArtifactStagingDirectory)

    - upload: $(Build.ArtifactStagingDirectory)
      artifact: drop

- stage: Docker
  displayName: Docker build and push stage
  jobs:
  - job: DockerBuildAndPush
    displayName: Build and Push Docker Image
    pool:
      vmImage: 'ubuntu-latest'
    
    steps:
    - task: Docker@2
      displayName: 'Login to Docker Registry'
      inputs:
        command: 'login'
        containerRegistry: 'DockerServiceConnection'  # Reference your service connection here

    - task: Docker@2
      displayName: 'Build Docker Image'
      inputs:
        command: 'build'
        Dockerfile: '$(Build.SourcesDirectory)/Dockerfile'  # Path to Dockerfile
        buildContext: '$(Build.SourcesDirectory)'  # Build context
        tags: '$(dockerRegistry)/$(dockerImageName):$(dockerTag)'  # Tagging the image

    - task: Docker@2
      displayName: 'Push Docker Image'
      inputs:
        command: 'push'
        containerRegistry: 'DockerServiceConnection'  # Reference your service connection here
        imageName: '$(dockerRegistry)/$(dockerImageName):$(dockerTag)'  # Correct image name and tag
